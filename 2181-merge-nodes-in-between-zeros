Problem:
https://leetcode.com/problems/merge-nodes-in-between-zeros//

===================================================================
Constraints
The number of nodes in the list is in the range [3, 2 * 105].
0 <= Node.val <= 1000
There are no two consecutive nodes with Node.val == 0.
The beginning and end of the linked list have Node.val == 0.
===================================================================
Explanation
1. Create a new ListNode for res.
2. Loop the given ListNode and keep a count of add till u reach next zero.
3. Add the zero to the res.next and move res to next node.
4. return reshead.next because reshead.val is zero (initialized)

===================================================================
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        res = reshead = ListNode(0)
        
        currentNode = head.next
        
        while currentNode:
            add = 0
            while currentNode.val != 0:
                add += currentNode.val
                currentNode = currentNode.next
            
            res.next = ListNode(add)
            res = res.next
            currentNode = currentNode.next
            
        return reshead.next
===================================================================
Time complexity = O(n)
Space complexity = O(n/2) ~ O(n)
