Problem:
https://leetcode.com/contest/weekly-contest-290/problems/number-of-flowers-in-full-bloom/

===================================================================
Constraints
1 <= flowers.length <= 5 * 104
flowers[i].length == 2
1 <= starti <= endi <= 109
1 <= persons.length <= 5 * 104
1 <= persons[i] <= 109

===================================================================
Explanation
1. Sort start and end times separetly.
2. Now for every person. bisect_right_start - bisect_left_end is the number of flowers.
3. You want to bisect right the start because you want to count those flowers too that bloom on the same day.

===================================================================
class Solution:
    def fullBloomFlowers(self, flowers: List[List[int]], persons: List[int]) -> List[int]:
        
        sorted_start, sorted_end = sorted(a for a,b in flowers), sorted(b for a,b in flowers)
        res = []
        for p in persons:
            res.append(bisect.bisect_right(sorted_start,p) - bisect.bisect_left(sorted_end,p))
            
        return res
===================================================================
Time complexity = O(nlogn)
Space complexity = O(n)
