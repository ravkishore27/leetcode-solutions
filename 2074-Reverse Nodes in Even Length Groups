Problem:
https://leetcode.com/problems/reverse-nodes-in-even-length-groups/

===================================================================

Explanation
1. Use a stack to keep track of next nodes.
2. pop them in reverse order and attach them to prevNode.
3. Use this technique only if the len(stack) is even
4. if not, just move forward.

===================================================================

class Solution:
    def reverseEvenLengthGroups(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        i = 2
        
        prevNode = head
        curNode = head.next
        
        if not curNode:
            return prevNode
        
        while curNode:
            
            temp_cur_node = curNode
            
            stack = []
            for j in range(i):
                if temp_cur_node == None:
                    break
                stack.append(temp_cur_node)
                temp_cur_node = temp_cur_node.next

            if len(stack) % 2 != 0:
                for j in range(i):
                    if curNode == None:
                        break
                    prevNode = curNode
                    curNode = curNode.next
            else:
                while stack:
                    next_node = stack.pop()
                    prevNode.next = next_node
                    prevNode = prevNode.next

                curNode.next = temp_cur_node
                prevNode = curNode
                curNode = temp_cur_node
            
            i += 1
            
        return head
===================================================================

Time complexity = O(n)
Space complexity = O(n)
