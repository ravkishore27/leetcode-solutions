Problem:
https://leetcode.com/contest/weekly-contest-304/problems/maximum-number-of-groups-entering-a-competition/

===================================================================
Constraints
1 <= grades.length <= 105
1 <= grades[i] <= 105

===================================================================
Explanation
1. Start from sqrt(n) and loop till n
2. calculate that value where summation(i) > n
3. return i - 1
4. Edge cases are n = 1,2,3
5. Note: The values of the grades dont matter.

===================================================================
class Solution:
    def maximumGroups(self, grades: List[int]) -> int:
        
        n = len(grades)
        
        if n == 1 or n == 2:
            return 1
        
        if n == 3:
            return 2
        
        x = math.floor(math.sqrt(n))
        
        for i in range(x, n):
            if (i * (i+1)) // 2 > n:
                return i - 1
===================================================================
Time complexity = O(n - sqrt(n))
Space complexity = O(1)
