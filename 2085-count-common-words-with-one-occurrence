Problem:
https://leetcode.com/problems/count-common-words-with-one-occurrence/

===================================================================
Constraints

1 <= words1.length, words2.length <= 1000
1 <= words1[i].length, words2[j].length <= 30
words1[i] and words2[j] consists only of lowercase English letters.

===================================================================
Explanation
1. create a dict {"word" : [count in first list , count in second list]}
2. Update the dict by traversing both list1 and list2
3. if the dictionary has [1,1] for a given word then increase result.

===================================================================
class Solution:
    def countWords(self, words1: List[str], words2: List[str]) -> int:
        
        dp = {}
        res = 0
        
        for word in words1:
            if word not in dp:
                dp[word] = [0, 0]
            dp[word][0] += 1

        for word in words2:
            if word in dp:
                dp[word][1] += 1
                
        for word in dp:
            if dp[word] == [1,1]:
                res += 1
        return res
===================================================================
Time complexity = O(n)
Space complexity = O(n)
