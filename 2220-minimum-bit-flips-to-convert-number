Problem:
https://leetcode.com/contest/biweekly-contest-75/problems/minimum-bit-flips-to-convert-number/

===================================================================
Constraints
0 <= start, goal <= 109

===================================================================
Explanation
1. Loop each binary representation of start and goal
2. Backwards loop.
3. If n or m is less than 0 then add '0' and check.
4. Check if same else add res += 1

===================================================================
class Solution:
    def minBitFlips(self, start: int, goal: int) -> int:
        bin_start = bin(start).split('b')[1]
        bin_goal = bin(goal).split('b')[1]
        
        n, m = len(bin_start) - 1, len(bin_goal) - 1
        
        # print(bin_start, bin_goal)
        
        res = 0
        
        while n >= 0 or m >= 0:
            
            if n < 0:
                curr_a = '0'
            else:
                curr_a = bin_start[n]
                n -= 1
                
            if m < 0:
                curr_b = '0'
            else:
                curr_b = bin_goal[m]
                m -= 1
                
            # print(curr_a, curr_b)
            if curr_a != curr_b:
                res += 1
                
        return res
===================================================================
Time complexity = O(max(n,m))
Space complexity = O(1)
