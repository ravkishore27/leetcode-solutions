Problem:
https://leetcode.com/problems/two-furthest-houses-with-different-colors/

===================================================================

Explanation

1. Find the left most house that is different color than the n-th house.
2. Find the right most house that is different color than the 0-th house.
3. return the max difference from the 0 --to--> right, left --to--> n 

===================================================================

class Solution:
    def maxDistance(self, colors: List[int]) -> int:
        
        i = 0 
        n = len(colors) - 1
        
        res = 0
        
        for i in range(n):
            if colors[i] != colors[n]:
                res = max(res, n - i)
                break
        
        for i in range(n, -1, -1):
            if colors[i] != colors[0]:
                res = max(res, i - 0)
                break
                
        return res
        
===================================================================

Time complexity = O(2n)
Space complexity = O(1)
