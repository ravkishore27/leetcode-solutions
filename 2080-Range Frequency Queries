Problem:
https://leetcode.com/problems/range-frequency-queries/

===================================================================

Explanation
1. Create a index_map of frequency for each number.
{ "number" : ["index1", "index2", ....] }
2. Use binary search to find the left_index and right_index for \
given left and right.
3. right_index - left_index is the frequency for the given number.

===================================================================

class RangeFreqQuery:

    def __init__(self, arr: List[int]):
        self.arr = arr
        self.index_map = defaultdict(list)
        
        for i,num in enumerate(self.arr):
            self.index_map[num].append(i)
        
        # print(self.index_map)
        

    def query(self, left: int, right: int, value: int) -> int:
        
        # use binary search
        left_index = bisect.bisect_left(self.index_map[value], left)
        right_index = bisect.bisect_right(self.index_map[value], right)
        
        return right_index - left_index

===================================================================

Time complexity = O(qlogn) where q = queries.
Space complexity = O(n)
