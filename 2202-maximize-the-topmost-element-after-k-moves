Problem:
https://leetcode.com/contest/weekly-contest-284/problems/maximize-the-topmost-element-after-k-moves/

===================================================================
Constraints
1 <= nums.length <= 105
0 <= nums[i], k <= 109

===================================================================
Explanation
1. The real issue here is to find the edge cases. let n = len(nums).
2. If k == 0 return nums[0], first element.
3. if k == 1 and n == 1 then return -1. (only case)
4. if k == 1 and n > 1 then return nums[1]
5. if n == 1 and k is even then return nums[0]
6. if n == 1 and k is odd then return -1. 
7. if k < n then return max of nums[k] or nums[k-1] because depends
if you want to leave hightest element on top or add/remove till it ends up on top after k operations.
8. if k >= n then check if (k-n) is odd then return max(nums)
9. But if its even then return max(nums[:n-1] if n==k else max(nums)

===================================================================
class Solution:
    def maximumTop(self, nums: List[int], k: int) -> int:
        
        n = len(nums)
    
        if k == 0:
            return nums[0]
        
        if k == 1 and len(nums) == 1:
            return -1
        
        if k == 1:
            return nums[1]
        
        if len(nums) == 1:
            if k % 2 == 0:
                return nums[0]
            else:
                return -1
        
        if k < len(nums):
            return max(max(nums[:k-1]), nums[k])
                
        
        if k >= len(nums):
            if (k-n) % 2 == 1:
                return(max(nums))
            else:
                if n == k:
                    return max(nums[:n-1])
                else:
                    return max(nums)
===================================================================
Time complexity = O(1)
Space complexity = O(1)
