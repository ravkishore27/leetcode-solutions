Problem:
https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store/

===================================================================

Explanation

Binary Solution.
Generally speaking, for a given m tasks and n ppl/containers.
You can find x such that 1<=x<=m<=n.
Also this x is the min number of groupings of ppl/containers for the given m tasks.

===================================================================

class Solution:
    def minimizedMaximum(self, n: int, quantities: List[int]) -> int:
        
        left, right = 1 , max(quantities)
        
        while left < right:
            
            mid = (left + right) // 2
            
            if (sum(math.ceil(quantities[i]/mid) for i in range(len(quantities)))) > n:
                
                left  = mid + 1
            
            else:
                right = mid
                
        return left

Time complexity = O(nlog100000)
Space complexity = O(1)

===================================================================
The below works but very slow and may not execute for large inputs.
heap solution.
Time complexity = O(nlogn)

class Solution:
    def minimizedMaximum(self, n: int, quantities: List[int]) -> int:
        
        # max heap; negative numbers conversion for max heap usage using min-heap.
        quantities_neg = [-1 * quantities[i] for i in range(len(quantities))]
        
        # heapify
        heap = quantities_neg
        heapq.heapify(heap)
        
        # create a mapper and each product gets atleast one store.
        # mapper { initial_quantity : [initial_quantity, number_of_stores]}
        mapper = {}
        for q in quantities:
            if q not in mapper:
                mapper[q] = []
            mapper[q].append((q,1))
        
        # calculate the remaining stores
        remaining_stores = n - len(quantities)
        
        # print(remaining_stores//len(quantities))
        
        # Current maximum product in heap       
        curr_max_product = -1 * heapq.heappop(heap)
        
        while(curr_max_product > 1 and remaining_stores > 0):
            
            # print("beg", remaining_stores, curr_max_product, heap, mapper)
            
            # default is 1
            min_stores_per_product = 1
            
            # print(min_stores_per_product)
            
            # calculate the new max value for current product when 1 store is added
            curr_product_quantity, curr_product_stores  = mapper[curr_max_product].pop(0)
            new_product_stores = curr_product_stores + min_stores_per_product
            new_calculated_product = math.ceil(curr_product_quantity / new_product_stores)
            
            # update mapper
            if new_calculated_product not in mapper:
                mapper[new_calculated_product] = []
            mapper[new_calculated_product].append((curr_product_quantity, new_product_stores))
            
            # update heap
            heapq.heappush(heap, -1*new_calculated_product)
            
            # print("end", remaining_stores, curr_max_product, heap, mapper)
            
            # next current max product in heap
            curr_max_product = -1 * heapq.heappop(heap)
                        
            remaining_stores -= min_stores_per_product
        
        return curr_max_product
