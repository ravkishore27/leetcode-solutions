Problem:
https://leetcode.com/problems/most-beautiful-item-for-each-query/

===================================================================
Explanation
1. Sort the items.
2. Create another list for prices.
3. Update the items if the prev item has more beauty.
4. Use bisect_right to prices list to know where to insert.
5. Add zero if n == 0 else items[n-1]

===================================================================
class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        
        items = sorted(items)
        
        prices = [items[i][0] for i in range(len(items))]
        
        res = []
        
        for i in range(1, len(items)):
            if items[i][1] < items[i-1][1]:
                items[i][1] = items[i - 1][1]
        
        # print(items)
        # print(prices)
        
        for q in queries:
            n = bisect.bisect_right(prices, q, 0, len(prices))
            if n == 0:
                res.append(0)
            else:
                res.append(items[n - 1][1])
            
        return res
===================================================================
Constraints
1 <= items.length, queries.length <= 10^5
items[i].length == 2
1 <= price(i), beauty(i), queries[j] <= 10^9
===================================================================
Time complexity = O(n) + O(n) =~ O(n)
Space complexity = O(2n)
