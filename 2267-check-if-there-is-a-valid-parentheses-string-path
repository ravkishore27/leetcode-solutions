Problem:
https://leetcode.com/contest/weekly-contest-292/problems/check-if-there-is-a-valid-parentheses-string-path/

===================================================================
Constraints
m == grid.length
n == grid[i].length
1 <= m, n <= 100
grid[i][j] is either '(' or ')'.

===================================================================
Explanation
1. Classic Top Down DP.
2. Use Dp with default set(). It is easier later to manage duplicates.
3. For every dp[i,j] caculate previous [i-1,j] and [i, j-1] sets + current val (1 or -1 depending on '(' or')')
4. Check if 0 is present in the last m-1,n-1 set.

===================================================================
class Solution:
    def hasValidPath(self, A: List[List[str]]) -> bool:
        m, n = len(A), len(A[0])
        dp = defaultdict(set)
            
        dp[0, -1] = dp[-1, 0] = {0}

        for i in range(m):
            for j in range(n):
                d = 1 if A[i][j] == '(' else -1
                dp[i,j] |= {a + d for a in dp[i-1,j] | dp[i,j-1] if a + d >= 0}
                print(dp[i,j])
        return 0 in dp[m - 1, n - 1]
===================================================================
Time complexity = O(nm(n+m))
Space complexity = O(nm(n+m))
