Problem:
https://leetcode.com/contest/weekly-contest-284/problems/count-artifacts-that-can-be-extracted/

===================================================================
Constraints
1 <= n <= 1000
1 <= artifacts.length, dig.length <= min(n2, 105)
artifacts[i].length == 4
dig[i].length == 2
0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1
r1i <= r2i
c1i <= c2i
No two artifacts will overlap.
The number of cells covered by an artifact is at most 4.
The entries of dig are unique.

===================================================================
Explanation
1. Make a grid with 0 as default value for each cell.
2. Make the grid-cell value to 1 if dig (dug*)
3. For every artificat check if all the cells in grid are dug. 
4. If yes, artifact can be extracted; res += 1

===================================================================
class Solution:
    def digArtifacts(self, n: int, artifacts: List[List[int]], dig: List[List[int]]) -> int:
        
        grid = [[0 for _ in range(n)] for _ in range(n)]
        
        for d in dig:
            grid[d[0]][d[1]] = 1
            
        # print(grid)
        
        res = [0]
        
        def returnArtifactCells(artifact, res):
            x1, y1, x2, y2 = artifact[0], artifact[1], artifact[2], artifact[3]
            
            for i in range(x1, x2+1):
                for j in range(y1, y2+1):
                    if grid[i][j] == 0:
                        return
            res[0] += 1
            
        for artifact in artifacts:
            returnArtifactCells(artifact, res)
            
        return res[0]
===================================================================
Time complexity = O(n*n)
Space complexity = O(n*n)
