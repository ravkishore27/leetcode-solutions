Problem:
https://leetcode.com/contest/biweekly-contest-77/problems/minimum-average-difference/

===================================================================
Constraints
1 <= nums.length <= 105
0 <= nums[i] <= 105

===================================================================
Explanation
1. Let res = maxsize, n = len(nums)
2. Calculate total and let curr = 0
3. Loop the nums.
4. For each index, update res and index if current abs(a-b) is min.
5. n -i - 1 can be zero; edge case.

===================================================================
class Solution:
    def minimumAverageDifference(self, nums: List[int]) -> int:
        
        res = sys.maxsize
        index = -1
        n = len(nums)
        
        total = sum(nums)
        curr = 0
        for i in range(n):
            curr += nums[i]
            a = (curr // (i + 1))
            if n -i-1 == 0:
                b = 0
            else:
                b =  ((total-curr) // (n - i - 1))
            
            if abs(a-b) < res:
                res = abs(a-b)
                index = i
            
        return index
===================================================================
Time complexity = O(n)
Space complexity = O(1)
