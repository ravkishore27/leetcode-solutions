Problem:
https://leetcode.com/contest/weekly-contest-291/problems/k-divisible-elements-subarrays/

===================================================================
Constraints
1 <= nums.length <= 200
1 <= nums[i], p <= 200
1 <= k <= nums.length

===================================================================
Explanation
1. Loop twice
2. Check for each subarry if the number of elements divisble is less than or equal to 'k'
3. Convert each subarray to string and add it to Set() to easily find duplicates.

===================================================================
class Solution:
    def countDistinct(self, nums: List[int], k: int, p: int) -> int:
        n = len(nums)
        
        res = set()
        
        for i in range(n):
            k1 = 0
            for j in range(i, n):
                if nums[j] % p == 0:
                        k1 += 1
                if k1 <= k:
                    res.add(str(nums[i:j+1]))
                else:
                    break
        
        return len(res)
===================================================================
Time complexity = O(n**2)
Space complexity = O(n)
