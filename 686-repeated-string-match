Problem:
https://leetcode.com/problems/repeated-string-match/

===================================================================
Constraints
1 <= a.length, b.length <= 104
a and b consist of lowercase English letters.

===================================================================
Explanation
1. KMP problem.
2. First build LPS for str_b
3. Then add a to itself till you find str_b in the increasing string.

===================================================================
class Solution:
    def repeatedStringMatch(self, a: str, b: str) -> int:
        
        def buildLPS(b):
            
            m = len(b)
            lps = [0] * m
            
            j = 0
            i = 1
            
            while i < m:
                
                if b[i] == b[j]:
                    j += 1
                    lps[i] = j
                    i += 1
                    
                else:
                    if j != 0:
                        j = lps[j-1]
                    else:
                        i += 1
                        
            return lps
        
        lps = buildLPS(b)
        
        i, j = 0, 0
        
        n = len(a)
        m = len(b)
        
        x_a = a
        res = 1
        
        x = (m // n) + 2
        
        while res <= x + 2 and i < n and j < m:
            
            if x_a[i] == b[j]:
                i += 1
                j += 1
            
            if i == n and j != m:
                x_a = x_a + a
                n = len(x_a)
                res += 1
            if j == m:
                return res
            elif i < n and x_a[i] != b[j]:
                if j != 0:
                    j = lps[j-1]
                else:
                    i += 1
                    
        return -1
===================================================================
Time complexity = O(n*(m//2+2)) ~ O(n*m)
Space complexity = O(m)
