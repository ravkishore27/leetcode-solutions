Problem:
https://leetcode.com/problems/repeated-string-match/

===================================================================
Constraints
1 <= a.length, b.length <= 104
a and b consist of lowercase English letters.

===================================================================
Explanation
1. KMP problem.
2. First build LPS for str_b
3. Then add a to itself till you find str_b in the increasing string.

===================================================================
class Solution:
    def repeatedStringMatch(self, a: str, b: str) -> int:
        
        n, m = len(a), len(b)
        
        lcp = [0] * m
        length = 0
        i = 1
        
        while i < m:
            if b[i] == b[length]:
                length += 1
                lcp[i] = length
                i += 1
            else:
                if length != 0:
                    length = lcp[length-1]
                else:
                    i += 1
                    
        # print(lcp)
        
        res = 1
        temp_a = a
        
        max_res = (m // n) + 2
        
        i, j, k = 0, 0, 0
        
        while k <= max_res:
            if a[i] == b[j]:
                i += 1
                j += 1
                
            if j == m:
                return res
            
            elif i < len(a) and a[i] != b[j]:
                if j != 0:
                    j = lcp[j-1]
                else:
                    i += 1
                    
            if i == len(a):
                res += 1
                a += temp_a
                k += 1
        
        return -1
===================================================================
Time complexity = O(n*(m//2+2)) ~ O(n*m)
Space complexity = O(m)
